import { XuiClient } from "../api/xui-client";
import { createLogger } from "../utils/logger";
import config from "../utils/config";
import convexClient from "./convex-client";
import { Id } from "../../convex/_generated/dataModel";
import { api } from "../../convex/_generated/api";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è VPN —Å–µ—Ä–≤–∏—Å–∞
const logger = createLogger("vpn-service");

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø–∞–º –≤ Convex
interface ConvexUser {
  _id: Id<"users">;
  telegramId: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  createdAt: number;
  isAdmin: boolean;
  isBlocked: boolean;
}

interface ConvexSubscriptionPlan {
  _id: Id<"subscriptionPlans">;
  name: string;
  trafficGB: number;
  durationDays: number;
  price: number;
  isActive: boolean;
}

interface ConvexSubscription {
  _id: Id<"userSubscriptions">;
  userId: Id<"users">;
  planId: Id<"subscriptionPlans">;
  status: string;
  expiresAt: number;
  createdAt: number;
  updatedAt: number;
  plan: ConvexSubscriptionPlan;
}

interface ConvexVpnAccount {
  _id: Id<"vpnAccounts">;
  userId: Id<"users">;
  inboundId: number;
  clientId: string;
  email: string;
  expiresAt: number;
  trafficLimit: number;
  trafficUsed: number;
  status: string;
  createdAt: number;
  lastUpdatedAt: number;
  connectionDetails: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VPN —á–µ—Ä–µ–∑ 3x-ui API
 */
export class VpnService {
  private readonly xuiClient: XuiClient;

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç 3x-ui API
    this.xuiClient = new XuiClient(
      config.XUI_API_URL,
      config.XUI_API_USERNAME,
      config.XUI_API_PASSWORD
    );
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param bytes –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static formatTraffic(bytes: number): string {
    if (bytes < 1024) {
      return `${bytes} B`;
    } else if (bytes < 1024 * 1024) {
      return `${(bytes / 1024).toFixed(2)} KB`;
    } else if (bytes < 1024 * 1024 * 1024) {
      return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
    } else {
      return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param timestamp Timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static formatExpiryDate(timestamp: number): string {
    const date = new Date(timestamp);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async getUserVpnStats(telegramId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.";
      }

      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç–∞.";
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN
      const updatedAccount = await convexClient.updateVpnAccountStats(vpnAccount._id) as ConvexVpnAccount;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ VPN-–∞–∫–∫–∞—É–Ω—Ç–µ
      const trafficUsed = VpnService.formatTraffic(updatedAccount.trafficUsed);
      const trafficLimit = VpnService.formatTraffic(updatedAccount.trafficLimit);
      const trafficPercentage = Math.round((updatedAccount.trafficUsed / updatedAccount.trafficLimit) * 100);
      const expiryDate = VpnService.formatExpiryDate(updatedAccount.expiresAt);
      
      const statusMap: Record<string, string> = {
        active: "–ê–∫—Ç–∏–≤–µ–Ω",
        inactive: "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
        expired: "–ò—Å—Ç–µ–∫",
        blocked: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
      };

      let message = `üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN-–ø–æ–¥–ø–∏—Å–∫–µ*

üîπ *–¢–∞—Ä–∏—Ñ*: ${subscription.plan.name}
üîπ *–°—Ç–∞—Ç—É—Å*: ${statusMap[updatedAccount.status] || updatedAccount.status}
üîπ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ*: ${expiryDate}
üîπ *–¢—Ä–∞—Ñ–∏–∫*: ${trafficUsed} –∏–∑ ${trafficLimit} (${trafficPercentage}%)`;

      const isInactive = updatedAccount.status === "inactive" || updatedAccount.status === "expired";
      const isTrafficExceeded = updatedAccount.trafficUsed >= updatedAccount.trafficLimit;
      const isExpired = Date.now() > updatedAccount.expiresAt;
      
      isInactive && (
        isTrafficExceeded && (message += `\n\n‚ö†Ô∏è *–í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –∏—Å—á–µ—Ä–ø–∞–Ω*. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.`) ||
        isExpired && (message += `\n\n‚ö†Ô∏è *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫*. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.`)
      );

      return message;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VPN", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VPN";
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async getConnectionDetails(telegramId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }

      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞";
      }

      if (vpnAccount.status !== "active") {
        return "–í–∞—à VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.";
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return `üîê *–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN*

–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.

üìã *–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è*:
\`\`\`
${vpnAccount.connectionDetails}
\`\`\``;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param subscriptionPlanId ID —Ç–∞—Ä–∏—Ñ–∞
   * @returns –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async createUserVpnAccount(telegramId: string, subscriptionPlanId: string): Promise<string> {
    try {
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      const existingSubscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (existingSubscription) {
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
      const subscriptionId = await convexClient.createFreeSubscription(
        user._id,
        subscriptionPlanId as Id<"subscriptionPlans">
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É");
      }

      // –°–æ–∑–¥–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç
      const inboundId = Number(config.XUI_DEFAULT_INBOUND_ID);
      if (isNaN(inboundId)) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
      }

      if (!subscription._id) {
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subscription._id! –ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:", subscription);
        throw new Error("ID –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      }

      logger.info("–í—ã–∑–æ–≤ createVpnAccount —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", {
        userId: user._id,
        userSubscriptionId: subscription._id,
        inboundId
      });

      const vpnAccount = await convexClient.createVpnAccount(
        user._id,
        subscription._id,
        inboundId
      );

      if (!vpnAccount) {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
      }

      return `‚úÖ VPN-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"`;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∞–∫–∫–∞—É–Ω—Ç–∞", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    }
  }

  /**
   * –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param planId ID —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
   * @returns –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async extendSubscription(telegramId: string, planId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç–∞.";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscription = await convexClient.getSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
      const plan = await convexClient.query(api.subscriptionPlans.getPlanById, {
        planId: planId,
      });
      
      if (!plan) {
        return "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.";
      }
      
      // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await convexClient.extendSubscription(subscription._id, planId as Id<"subscriptionPlans">);
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç
      const reactivateResult = await convexClient.reactivateVpnAccount(
        vpnAccount._id,
        subscription.expiresAt,
        plan.trafficGB * 1024 * 1024 * 1024 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ì–ë –≤ –±–∞–π—Ç—ã
      );
      
      if (!reactivateResult) {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN-–∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
      }
      
      return `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!

üîπ *–¢–∞—Ä–∏—Ñ*: ${plan.name}
üîπ *–ü–µ—Ä–∏–æ–¥*: ${plan.durationDays} –¥–Ω–µ–π
üîπ *–¢—Ä–∞—Ñ–∏–∫*: ${plan.trafficGB} –ì–ë

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"`;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    }
  }
  
  /**
   * –ú–µ–Ω—è–µ—Ç —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param newPlanId ID –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
   * @returns –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async changeSubscriptionPlan(telegramId: string, newPlanId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç–∞.";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const subscription = await convexClient.getSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.";
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
      const newPlan = await convexClient.query(api.subscriptionPlans.getPlanById, {
        planId: newPlanId,
      });
      
      if (!newPlan) {
        return "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ.";
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
      await convexClient.changePlan(subscription._id, newPlanId as Id<"subscriptionPlans">);
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç
      const reactivateResult = await convexClient.reactivateVpnAccount(
        vpnAccount._id,
        subscription.expiresAt,
        newPlan.trafficGB * 1024 * 1024 * 1024 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ì–ë –≤ –±–∞–π—Ç—ã
      );
      
      if (!reactivateResult) {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN-–∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤—ã–º —Ç–∞—Ä–∏—Ñ–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
      }
      
      return `‚úÖ –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!

üîπ *–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ*: ${newPlan.name}
üîπ *–ü–µ—Ä–∏–æ–¥*: ${newPlan.durationDays} –¥–Ω–µ–π
üîπ *–¢—Ä–∞—Ñ–∏–∫*: ${newPlan.trafficGB} –ì–ë

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"`;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    }
  }
}

export const vpnService = new VpnService();

export default vpnService; 
import { XuiClient } from "../api/xui-client";
import { createLogger } from "../utils/logger";
import config from "../utils/config";
import convexClient from "./convex-client";
import { Id } from "../../convex/_generated/dataModel";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è VPN —Å–µ—Ä–≤–∏—Å–∞
const logger = createLogger("vpn-service");

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø–∞–º –≤ Convex
interface ConvexUser {
  _id: Id<"users">;
  telegramId: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  createdAt: number;
  isAdmin: boolean;
  isBlocked: boolean;
}

interface ConvexSubscriptionPlan {
  _id: Id<"subscriptionPlans">;
  name: string;
  trafficGB: number;
  durationDays: number;
  price: number;
  isActive: boolean;
}

interface ConvexSubscription {
  _id: Id<"userSubscriptions">;
  userId: Id<"users">;
  planId: Id<"subscriptionPlans">;
  status: string;
  expiresAt: number;
  createdAt: number;
  updatedAt: number;
  plan: ConvexSubscriptionPlan;
}

interface ConvexVpnAccount {
  _id: Id<"vpnAccounts">;
  userId: Id<"users">;
  inboundId: number;
  clientId: string;
  email: string;
  expiresAt: number;
  trafficLimit: number;
  trafficUsed: number;
  status: string;
  createdAt: number;
  lastUpdatedAt: number;
  connectionDetails: string;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VPN —á–µ—Ä–µ–∑ 3x-ui API
 */
export class VpnService {
  private readonly xuiClient: XuiClient;

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç 3x-ui API
    this.xuiClient = new XuiClient(
      config.XUI_API_URL,
      config.XUI_API_USERNAME,
      config.XUI_API_PASSWORD
    );
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param bytes –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static formatTraffic(bytes: number): string {
    if (bytes < 1024) {
      return `${bytes} B`;
    } else if (bytes < 1024 * 1024) {
      return `${(bytes / 1024).toFixed(2)} KB`;
    } else if (bytes < 1024 * 1024 * 1024) {
      return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;
    } else {
      return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
   * @param timestamp Timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
   */
  static formatExpiryDate(timestamp: number): string {
    const date = new Date(timestamp);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async getUserVpnStats(telegramId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }

      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞";
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
      try {
        await convexClient.updateTrafficUsage(vpnAccount.email);
      } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞", error);
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
      const updatedAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!updatedAccount) {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞";
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏";
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ VPN-–∞–∫–∫–∞—É–Ω—Ç–µ
      const trafficUsed = VpnService.formatTraffic(updatedAccount.trafficUsed);
      const trafficLimit = VpnService.formatTraffic(updatedAccount.trafficLimit);
      const trafficPercentage = Math.round((updatedAccount.trafficUsed / updatedAccount.trafficLimit) * 100);
      const expiryDate = VpnService.formatExpiryDate(updatedAccount.expiresAt);
      
      const statusMap: Record<string, string> = {
        active: "–ê–∫—Ç–∏–≤–µ–Ω",
        expired: "–ò—Å—Ç–µ–∫",
        blocked: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
      };

      return `üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ VPN-–ø–æ–¥–ø–∏—Å–∫–µ*

üîπ *–¢–∞—Ä–∏—Ñ*: ${subscription.plan.name}
üîπ *–°—Ç–∞—Ç—É—Å*: ${statusMap[updatedAccount.status] || updatedAccount.status}
üîπ *–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ*: ${expiryDate}
üîπ *–¢—Ä–∞—Ñ–∏–∫*: ${trafficUsed} –∏–∑ ${trafficLimit} (${trafficPercentage}%)

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connection`;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VPN", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VPN";
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  async getConnectionDetails(telegramId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }

      // –ü–æ–ª—É—á–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const vpnAccount = await convexClient.getUserVpnAccount(user._id) as ConvexVpnAccount;
      if (!vpnAccount) {
        return "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞";
      }

      if (vpnAccount.status !== "active") {
        return "–í–∞—à VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.";
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      return `üîê *–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPN*

–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º V2rayNG –¥–ª—è Android –∏–ª–∏ Happ –¥–ª—è iOS.

üì≤ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "+" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å"
3. –í—ã–±–µ—Ä–∏—Ç–µ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥" –∏–ª–∏ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"
4. –í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

üìã *–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è*:
\`\`\`
${vpnAccount.connectionDetails}
\`\`\``;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param subscriptionPlanId ID —Ç–∞—Ä–∏—Ñ–∞
   * @returns –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async createUserVpnAccount(telegramId: string, subscriptionPlanId: string): Promise<string> {
    try {
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
      const user = await convexClient.getUserByTelegramId(telegramId) as ConvexUser;
      if (!user) {
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      const existingSubscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (existingSubscription) {
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
      const subscriptionId = await convexClient.createFreeSubscription(
        user._id,
        subscriptionPlanId as Id<"subscriptionPlans">
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscription = await convexClient.getActiveSubscription(user._id) as ConvexSubscription;
      if (!subscription) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É");
      }

      // –°–æ–∑–¥–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç
      const inboundId = Number(config.XUI_DEFAULT_INBOUND_ID);
      if (isNaN(inboundId)) {
        throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
      }

      if (!subscription._id) {
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subscription._id! –ü–æ–ª–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:", subscription);
        throw new Error("ID –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      }

      logger.info("–í—ã–∑–æ–≤ createVpnAccount —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", {
        userId: user._id,
        userSubscriptionId: subscription._id,
        inboundId
      });

      const vpnAccount = await convexClient.createVpnAccount(
        user._id,
        subscription._id,
        inboundId
      );

      if (!vpnAccount) {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VPN-–∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
      }

      return `‚úÖ VPN-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connection`;
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN-–∞–∫–∫–∞—É–Ω—Ç–∞", error);
      return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";
    }
  }
}

export const vpnService = new VpnService();

export default vpnService; 
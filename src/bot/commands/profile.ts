import { Composer } from "grammy";
import { createLogger } from "../../utils/logger";
import vpnService from "../../services/vpn-service";
import convexClient from "../../services/convex-client";
import { profileKeyboard, viewConnectionKeyboard } from "../keyboards";

const logger = createLogger("command:profile");

const composer = new Composer();

async function sendProfileInfo(ctx: any, source: string) {
  try {
    const telegramId = ctx.from?.id.toString() ?? "";

    logger.info(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ ${source}`
    );

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await convexClient.getUserByTelegramId(telegramId);
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPN
    const vpnStats = await vpnService.getUserVpnStats(telegramId);

    const message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: \`${telegramId}\`
${user.username && `üë§ Username: @${user.username}`}

${vpnStats}`;

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: profileKeyboard,
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è (${source})`, error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
composer.hears("üë§ –ü—Ä–æ—Ñ–∏–ª—å", async (ctx) => {
  await sendProfileInfo(ctx, "–∫–Ω–æ–ø–∫—É –º–µ–Ω—é");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
composer.callbackQuery("refresh_stats", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();

    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É`);

    await ctx.answerCallbackQuery({
      text: "–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...",
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await convexClient.getUserByTelegramId(telegramId);
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPN
    const vpnStats = await vpnService.getUserVpnStats(telegramId);

    const message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: \`${telegramId}\`
${user.username && `üë§ Username: @${user.username}`}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleDateString("ru-RU")}

${vpnStats}`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: profileKeyboard,
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", error);
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      show_alert: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
composer.callbackQuery("back_to_profile", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();

    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å`);

    await ctx.answerCallbackQuery();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await convexClient.getUserByTelegramId(telegramId);
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É VPN
    const vpnStats = await vpnService.getUserVpnStats(telegramId);

    const message = `üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üÜî ID: \`${telegramId}\`
${user.username && `üë§ Username: @${user.username}`}

${vpnStats}`;

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: profileKeyboard,
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å", error);
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      show_alert: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "show_connection"
composer.callbackQuery("show_connection", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();

    logger.info(
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è`
    );

    const message = await vpnService.getConnectionDetails(telegramId);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: viewConnectionKeyboard,
    });

    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", error);
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
      show_alert: true,
    });
  }
});

export default composer;

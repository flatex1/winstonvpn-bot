import { Composer } from "grammy";
import { createLogger } from "../../utils/logger";
import vpnService from "../../services/vpn-service";

const logger = createLogger("command:subscription");

const composer = new Composer();

composer.command("subscription", async (ctx) => {
  try {
    const telegramId = ctx.from?.id.toString() ?? '';
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ`);
    
    const message = await vpnService.getUserVpnStats(telegramId);
    
    await ctx.reply(message, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /subscription", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

composer.hears("üìä –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", async (ctx) => {
  try {
    const telegramId = ctx.from?.id.toString() ?? '';
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é`);
    
    const message = await vpnService.getUserVpnStats(telegramId);
    
    await ctx.reply(message, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

export default composer; 
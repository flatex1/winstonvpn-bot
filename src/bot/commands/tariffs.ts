import { Composer } from "grammy";
import { createLogger } from "../../utils/logger";
import convexClient from "../../services/convex-client";
import vpnService from "../../services/vpn-service";
import { createTariffsKeyboard, createConfirmTariffKeyboard } from "../keyboards";
import { api } from "../../../convex/_generated/api";

const logger = createLogger("command:tariffs");

const composer = new Composer();

composer.command("tariffs", async (ctx) => {
  try {
    const telegramId = ctx.from?.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤`);
    
    const tariffs = await convexClient.getActivePlans();
    
    if (!tariffs || tariffs.length === 0) {
      await ctx.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }
    
    const keyboard = createTariffsKeyboard(tariffs);
    
    await ctx.reply(
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ VPN*

–£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É:

${tariffs.map(tariff => 
  `*${tariff.name}*
  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}
  `).join("\n")}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã /tariffs", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "üìù –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ"
composer.hears("üìù –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", async (ctx) => {
  try {
    const telegramId = ctx.from?.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    const tariffs = await convexClient.getActivePlans();
    
    if (!tariffs || tariffs.length === 0) {
      await ctx.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    const keyboard = createTariffsKeyboard(tariffs);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    await ctx.reply(
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ VPN*

–£ –Ω–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã VPN –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É:

${tariffs.map(tariff => 
  `*${tariff.name}*
  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}
  `).join("\n")}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ'", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "select_tariff"
composer.callbackQuery(/^select_tariff:(.+)$/, async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const tariffId = ctx.match[1];
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ ${tariffId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    const tariff = await convexClient.query(api.subscriptionPlans.getPlanById, {
      planId: tariffId,
    });
    
    if (!tariff) {
      await ctx.answerCallbackQuery({
        text: "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        show_alert: true,
      });
      return;
    }
    
    const keyboard = createConfirmTariffKeyboard(tariffId);
    
    await ctx.editMessageText(
      `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞*

–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ *${tariff.name}*:

‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}

–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞.`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
    
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'select_tariff'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞",
      show_alert: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "confirm_tariff"
composer.callbackQuery(/^confirm_tariff:(.+)$/, async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const tariffId = ctx.match[1];
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ${tariffId}`);
    
    await ctx.answerCallbackQuery({
      text: "–°–æ–∑–¥–∞–µ–º VPN-–∞–∫–∫–∞—É–Ω—Ç...",
    });
    
    const result = await vpnService.createUserVpnAccount(telegramId, tariffId);
    
    await ctx.editMessageText(result, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'confirm_tariff'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞",
      show_alert: true,
    });
    
    await ctx.editMessageText(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "cancel_tariff"
composer.callbackQuery("cancel_tariff", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    const tariffs = await convexClient.getActivePlans();
    
    if (!tariffs || tariffs.length === 0) {
      await ctx.editMessageText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      await ctx.answerCallbackQuery();
      return;
    }
    
    const keyboard = createTariffsKeyboard(tariffs);

    await ctx.editMessageText(
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ VPN*

–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ:

${tariffs.map(tariff => 
  `*${tariff.name}*
  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}
  `).join("\n")}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
    
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'cancel_tariff'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞",
      show_alert: true,
    });
  }
});

export default composer; 
import { Composer } from "grammy";
import { createLogger } from "../../utils/logger";
import convexClient from "../../services/convex-client";
import vpnService from "../../services/vpn-service";
import { createTariffsKeyboard, createConfirmTariffKeyboard } from "../keyboards";
import { api } from "../../../convex/_generated/api";

const logger = createLogger("command:tariffs");

const composer = new Composer();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "üìù –¢–∞—Ä–∏—Ñ—ã"
composer.hears("üìù –¢–∞—Ä–∏—Ñ—ã", async (ctx) => {
  try {
    const telegramId = ctx.from?.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    const tariffs = await convexClient.getActivePlans();
    
    if (!tariffs || tariffs.length === 0) {
      await ctx.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    const keyboard = createTariffsKeyboard(tariffs);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤
    await ctx.reply(
      `üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã*

${tariffs.map(tariff => 
  `*${tariff.name}*
  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}
  `).join("\n")}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–¢–∞—Ä–∏—Ñ—ã'", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "select_tariff"
composer.callbackQuery(/^select_tariff:(.+)$/, async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const tariffId = ctx.match[1];
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤—ã–±—Ä–∞–ª —Ç–∞—Ä–∏—Ñ ${tariffId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    const tariff = await convexClient.query(api.subscriptionPlans.getPlanById, {
      planId: tariffId,
    });
    
    if (!tariff) {
      await ctx.answerCallbackQuery({
        text: "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        show_alert: true,
      });
      return;
    }
    
    const keyboard = createConfirmTariffKeyboard(tariffId);
    
    await ctx.editMessageText(
      `üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞*

–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ *${tariff.name}*:

‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}

–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN-–¥–æ—Å—Ç—É–ø–∞.`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
    
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'select_tariff'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞",
      show_alert: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "confirm_tariff"
composer.callbackQuery(/^confirm_tariff:(.+)$/, async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    const tariffId = ctx.match[1];
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ${tariffId}`);
    
    await ctx.answerCallbackQuery({
      text: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...",
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await convexClient.getUserByTelegramId(telegramId);
    if (!user) {
      await ctx.editMessageText("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VPN-–∞–∫–∫–∞—É–Ω—Ç
    const vpnAccount = await convexClient.getUserVpnAccount(user._id);
    const existingSubscription = await convexClient.getSubscription(user._id);
    
    let result;
    
    if (vpnAccount && existingSubscription) {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å VPN-–∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–¥–ø–∏—Å–∫–∞
      
      if (vpnAccount.status === "active") {
        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        result = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ.";
      } else {
        // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ç—Ä–∞—Ñ–∏–∫), –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –∏–ª–∏ –º–µ–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–æ–≤—ã–π
        const isSamePlan = existingSubscription.planId === tariffId;
        
        if (isSamePlan) {
          // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
          result = await vpnService.extendSubscription(telegramId, tariffId);
        } else {
          // –°–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞
          result = await vpnService.changeSubscriptionPlan(telegramId, tariffId);
        }
      }
    } else {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
      result = await vpnService.createUserVpnAccount(telegramId, tariffId);
    }
    
    await ctx.editMessageText(result, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'confirm_tariff'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞",
      show_alert: true,
    });
    
    await ctx.editMessageText(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "back_to_menu" –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
composer.callbackQuery("back_to_menu", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    const tariffs = await convexClient.getActivePlans();
    
    if (!tariffs || tariffs.length === 0) {
      await ctx.editMessageText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      await ctx.answerCallbackQuery();
      return;
    }
    
    const keyboard = createTariffsKeyboard(tariffs);

    await ctx.editMessageText(
      `üìù *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ VPN*

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:

${tariffs.map(tariff => 
  `*${tariff.name}*
  ‚Ä¢ –¢—Ä–∞—Ñ–∏–∫: ${tariff.trafficGB} –ì–ë
  ‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${tariff.durationDays} –¥–Ω–µ–π
  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: ${tariff.description}
  `).join("\n")}`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      }
    );
    
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤", error);
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      show_alert: true,
    });
  }
});

export default composer; 
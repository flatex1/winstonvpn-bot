import { Composer } from "grammy";
import { createLogger } from "../../utils/logger";
import vpnService from "../../services/vpn-service";
import { viewConnectionKeyboard, instructionsKeyboard } from "../keyboards";

const logger = createLogger("command:connection");

const composer = new Composer();

async function sendConnectionDetails(ctx: any, source: string) {
  try {
    const telegramId = ctx.from?.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ ${source}`);
    
    const message = await vpnService.getConnectionDetails(telegramId!);
    
    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: viewConnectionKeyboard,
    });
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${source})`, error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connection
composer.command("connection", async (ctx) => {
  await sendConnectionDetails(ctx, "–∫–æ–º–∞–Ω–¥—É");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
composer.hears("üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", async (ctx) => {
  await sendConnectionDetails(ctx, "–∫–Ω–æ–ø–∫—É –º–µ–Ω—é");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–∞ "refresh_connection"
composer.callbackQuery("refresh_connection", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
    
    await ctx.answerCallbackQuery({
      text: "–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...",
    });
    
    const message = await vpnService.getConnectionDetails(telegramId);
    
    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: viewConnectionKeyboard,
    });
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback 'refresh_connection'", error);
    
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
      show_alert: true,
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é"
composer.callbackQuery("show_instructions", async (ctx) => {
  try {
    const telegramId = ctx.from.id.toString();
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é`);
    
    await ctx.editMessageText(
      "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é:",
      {
        reply_markup: instructionsKeyboard,
      }
    );
    
    await ctx.answerCallbackQuery();
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", error);
    await ctx.answerCallbackQuery({
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      show_alert: true,
    });
  }
});

export default composer; 
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { Id } from "./_generated/dataModel";
import { Doc } from "./_generated/dataModel";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ internal
declare module "./_generated/api" {
  interface InternalApi {
    users: {
      getUserById: (args: { userId: Id<"users"> }) => Promise<User>;
    };
    userSubscriptions: {
      getActiveSubscription: (args: { userId: Id<"users"> }) => Promise<Subscription>;
    };
    vpnAccounts: {
      getUserVpnAccount: (args: { userId: Id<"users"> }) => Promise<VpnAccount | null>;
      getVpnAccountById: (args: { accountId: Id<"vpnAccounts"> }) => Promise<VpnAccount | null>;
      getVpnAccountByEmail: (args: { email: string }) => Promise<VpnAccount | null>;
      saveVpnAccount: (args: VpnAccountCreateArgs) => Promise<Id<"vpnAccounts">>;
      extendVpnAccount: (args: { accountId: Id<"vpnAccounts">; expiresAt: number; trafficLimit: number }) => Promise<VpnAccount>;
      reactivateVpnAccount: (args: { accountId: Id<"vpnAccounts">; expiresAt: number; trafficLimit: number }) => Promise<VpnAccount>;
      updateAccountTraffic: (args: { accountId: Id<"vpnAccounts">; trafficUsed: number }) => Promise<boolean>;
      deactivateAccount: (args: { accountId: Id<"vpnAccounts">; reason: string }) => Promise<boolean>;
      removeVpnAccount: (args: { accountId: Id<"vpnAccounts"> }) => Promise<boolean>;
    };
  }
}

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
type VpnAccount = Doc<"vpnAccounts">;
type User = Doc<"users">;
type Subscription = {
  _id: Id<"userSubscriptions">;
  userId: Id<"users">;
  planId: Id<"subscriptionPlans">;
  status: string;
  expiresAt: number;
  plan: {
    name: string;
    trafficGB: number;
    durationDays: number;
  };
};

// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VPN –∞–∫–∫–∞—É–Ω—Ç–∞
interface VpnAccountCreateArgs {
  userId: Id<"users">;
  inboundId: number;
  clientId: string;
  email: string;
  expiresAt: number;
  trafficLimit: number;
  trafficUsed: number;
  status: string;
  connectionDetails: string;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserVpnAccount = query({
  args: { userId: v.id("users") },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("vpnAccounts")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .first();
  },
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID
export const getVpnAccountById = query({
  args: { accountId: v.id("vpnAccounts") },
  handler: async (ctx, args) => {
    return await ctx.db.get(args.accountId);
  },
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ email
export const getVpnAccountByEmail = query({
  args: { email: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db
      .query("vpnAccounts")
      .withIndex("by_email", (q) => q.eq("email", args.email))
      .first();
  },
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN-–∞–∫–∫–∞—É–Ω—Ç–µ –≤ –ë–î
export const saveVpnAccount = mutation({
  args: {
    userId: v.id("users"),
    inboundId: v.number(),
    clientId: v.string(),
    email: v.string(),
    expiresAt: v.number(),
    trafficLimit: v.number(),
    trafficUsed: v.number(),
    status: v.string(),
    connectionDetails: v.string(),
  },
  handler: async (ctx, args) => {
    const now = Date.now();
    
    return await ctx.db.insert("vpnAccounts", {
      userId: args.userId,
      inboundId: args.inboundId,
      clientId: args.clientId,
      email: args.email,
      expiresAt: args.expiresAt,
      trafficLimit: args.trafficLimit,
      trafficUsed: args.trafficUsed,
      status: args.status,
      createdAt: now,
      lastUpdatedAt: now,
      connectionDetails: args.connectionDetails,
    });
  },
});

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞
export const extendVpnAccount = mutation({
  args: {
    accountId: v.id("vpnAccounts"),
    expiresAt: v.number(),
    trafficLimit: v.number(),
  },
  handler: async (ctx, args) => {
    const account = await ctx.db.get(args.accountId);
    
    if (!account) {
      throw new Error("VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    await ctx.db.patch(args.accountId, {
      expiresAt: args.expiresAt,
      trafficLimit: args.trafficLimit,
      status: "active",
      lastUpdatedAt: Date.now(),
    });
    
    return await ctx.db.get(args.accountId);
  },
});

// –†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞)
export const reactivateVpnAccount = mutation({
  args: {
    accountId: v.id("vpnAccounts"),
    expiresAt: v.number(),
    trafficLimit: v.number(),
  },
  returns: v.boolean(),
  handler: async (ctx, args) => {
    const account = await ctx.db.get(args.accountId);
    
    if (!account) {
      throw new Error("VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    await ctx.db.patch(args.accountId, {
      status: "active",
      expiresAt: args.expiresAt,
      trafficLimit: args.trafficLimit,
      // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º trafficUsed, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω—É–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      lastUpdatedAt: Date.now(),
    });
    
    return true;
  },
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
export const updateAccountTraffic = mutation({
  args: {
    accountId: v.id("vpnAccounts"),
    trafficUsed: v.number(),
  },
  handler: async (ctx, args) => {
    const account = await ctx.db.get(args.accountId);
    
    if (!account) {
      throw new Error("VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    await ctx.db.patch(args.accountId, {
      trafficUsed: args.trafficUsed,
      lastUpdatedAt: Date.now(),
    });
    
    return true;
  },
});

// –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN-–∞–∫–∫–∞—É–Ω—Ç–∞
export const deactivateAccount = mutation({
  args: {
    accountId: v.id("vpnAccounts"),
    reason: v.string(), // "expired", "traffic_limit_exceeded", "manual"
  },
  handler: async (ctx, args) => {
    const account = await ctx.db.get(args.accountId);
    
    if (!account) {
      throw new Error("VPN-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    // –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ
    const newStatus = args.reason === "manual" ? "blocked" : "inactive";
    
    await ctx.db.patch(args.accountId, {
      status: newStatus, // –ò—Å–ø–æ–ª—å–∑—É–µ–º "inactive" –≤–º–µ—Å—Ç–æ "blocked" –¥–ª—è expired –∏ traffic_limit_exceeded
      lastUpdatedAt: Date.now(),
    });
    
    return true;
  },
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö VPN-–∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
export const checkAccountsStatus = mutation({
  returns: v.object({
    expiredCount: v.number(),
    upcomingExpiryCount: v.number(),
    trafficLimitExceededCount: v.number()
  }),
  handler: async (ctx) => {
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000; // 1 –¥–µ–Ω—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const threeDaysMs = 3 * oneDayMs; // 3 –¥–Ω—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫
    const expiredAccounts = await ctx.db
      .query("vpnAccounts")
      .filter((q) => 
        q.and(
          q.eq(q.field("status"), "active"),
          q.lt(q.field("expiresAt"), now)
        )
      )
      .collect();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "expired"
    for (const account of expiredAccounts) {
      await ctx.db.patch(account._id, {
        status: "inactive", // –ò—Å–ø–æ–ª—å–∑—É–µ–º "inactive" –≤–º–µ—Å—Ç–æ "expired" –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        lastUpdatedAt: now,
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const user = await ctx.db.get(account.userId);
      if (user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        await ctx.db.insert("notifications", {
          userId: account.userId,
          type: "vpn_expired",
          subscriptionId: undefined,
          message: `üö® –í–∞—à VPN-–∞–∫–∫–∞—É–Ω—Ç –∏—Å—Ç–µ–∫. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.`,
          isRead: false,
          createdAt: now,
          isSent: false
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
    const activeAccounts = await ctx.db
      .query("vpnAccounts")
      .filter((q) => q.eq(q.field("status"), "active"))
      .collect();
      
    // –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞
    const trafficLimitExceededAccounts = [];
    
    for (const account of activeAccounts) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞
      if (account.trafficUsed >= account.trafficLimit) {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        await ctx.db.patch(account._id, {
          status: "inactive", // –ò—Å–ø–æ–ª—å–∑—É–µ–º "inactive" –≤–º–µ—Å—Ç–æ "blocked" –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
          lastUpdatedAt: now,
        });
        
        trafficLimitExceededAccounts.push(account);
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        const user = await ctx.db.get(account.userId);
        if (user) {
          await ctx.db.insert("notifications", {
            userId: account.userId,
            type: "traffic_limit_exceeded",
            message: "‚ö†Ô∏è –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /tariffs.",
            isRead: false,
            createdAt: now,
            isSent: false
          });
        }
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (1-3 –¥–Ω—è)
    const upcomingExpiryAccounts = await ctx.db
      .query("vpnAccounts")
      .filter((q) => 
        q.and(
          q.eq(q.field("status"), "active"),
          q.gt(q.field("expiresAt"), now),
          q.lt(q.field("expiresAt"), now + threeDaysMs)
        )
      )
      .collect();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
    for (const account of upcomingExpiryAccounts) {
      const daysLeft = Math.ceil((account.expiresAt - now) / oneDayMs);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
      const existingNotification = await ctx.db
        .query("notifications")
        .withIndex("by_user_type", (q) => 
          q.eq("userId", account.userId)
          .eq("type", `vpn_expires_soon_${daysLeft}day`)
        )
        .order("desc")
        .first();
      
      // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (existingNotification && (now - existingNotification.createdAt < 12 * 60 * 60 * 1000)) {
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const user = await ctx.db.get(account.userId);
      if (user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        await ctx.db.insert("notifications", {
          userId: account.userId,
          type: `vpn_expires_soon_${daysLeft}day`,
          subscriptionId: undefined,
          message: `‚ö†Ô∏è –í–∞—à VPN-–∞–∫–∫–∞—É–Ω—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} ${getDayWord(daysLeft)}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!`,
          isRead: false,
          createdAt: now,
          isSent: false
        });
      }
    }
    
    return {
      expiredCount: expiredAccounts.length,
      upcomingExpiryCount: upcomingExpiryAccounts.length,
      trafficLimitExceededCount: trafficLimitExceededAccounts.length
    };
  },
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
function getDayWord(days: number): string {
  if (days >= 11 && days <= 19) return "–¥–Ω–µ–π";
  const lastDigit = days % 10;
  if (lastDigit === 1) return "–¥–µ–Ω—å";
  if (lastDigit >= 2 && lastDigit <= 4) return "–¥–Ω—è";
  return "–¥–Ω–µ–π";
}

// –£–¥–∞–ª–µ–Ω–∏–µ VPN-–∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –ë–î
export const removeVpnAccount = mutation({
  args: {
    accountId: v.id("vpnAccounts"),
  },
  handler: async (ctx, args) => {
    await ctx.db.delete(args.accountId);
    return true;
  },
}); 
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { Id } from "./_generated/dataModel";
import { api } from "./_generated/api";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getActiveSubscription = query({
  args: { userId: v.id("users") },
  handler: async (ctx, args) => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .filter((q) => q.eq(q.field("status"), "active"))
      .order("desc")
      .first();
    
    if (!subscription) {
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    const plan = await ctx.db.get(subscription.planId);
    
    return {
      ...subscription,
      plan,
    };
  },
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserSubscriptions = query({
  args: { userId: v.id("users") },
  handler: async (ctx, args) => {
    const subscriptions = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .collect();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const planIds = Array.from(new Set(subscriptions.map(sub => sub.planId)));
    const plans = await Promise.all(planIds.map(id => ctx.db.get(id)));
    const plansMap = Object.fromEntries(
      plans.filter(Boolean).map(plan => [plan!._id, plan])
    );
    
    return subscriptions.map(subscription => ({
      ...subscription,
      plan: plansMap[subscription.planId],
    }));
  },
});

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ –æ–ø–ª–∞—Ç—ã)
export const createFreeSubscription = mutation({
  args: {
    userId: v.id("users"),
    planId: v.id("subscriptionPlans"),
  },
  handler: async (ctx, args) => {
    const user = await ctx.db.get(args.userId);
    if (!user) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    const plan = await ctx.db.get(args.planId);
    if (!plan) {
      throw new Error("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const activeSubscription = await ctx.db
      .query("userSubscriptions")
      .withIndex("by_user", (q) => q.eq("userId", args.userId))
      .filter((q) => q.eq(q.field("status"), "active"))
      .first();
    
    if (activeSubscription) {
      await ctx.db.patch(activeSubscription._id, {
        status: "canceled",
        lastUpdatedAt: Date.now(),
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const now = Date.now();
    const expiresAt = now + plan.durationDays * 24 * 60 * 60 * 1000;
    
    return await ctx.db.insert("userSubscriptions", {
      userId: args.userId,
      planId: args.planId,
      status: "active",
      createdAt: now,
      expiresAt: expiresAt,
      lastUpdatedAt: now,
    });
  },
});

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
export const extendSubscription = mutation({
  args: {
    subscriptionId: v.id("userSubscriptions"),
    durationDays: v.number(),
  },
  handler: async (ctx, args) => {
    const subscription = await ctx.db.get(args.subscriptionId);
    if (!subscription) {
      throw new Error("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
    
    // –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiresAt = Math.max(
      subscription.expiresAt,
      Date.now()
    ) + args.durationDays * 24 * 60 * 60 * 1000;
    
    await ctx.db.patch(args.subscriptionId, {
      expiresAt,
      status: "active",
      lastUpdatedAt: Date.now(),
    });
    
    return await ctx.db.get(args.subscriptionId);
  },
});

// –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
export const cancelSubscription = mutation({
  args: { subscriptionId: v.id("userSubscriptions") },
  handler: async (ctx, args) => {
    const subscription = await ctx.db.get(args.subscriptionId);
    if (!subscription) {
      throw new Error("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
    
    await ctx.db.patch(args.subscriptionId, {
      status: "canceled",
      lastUpdatedAt: Date.now(),
    });
    
    return true;
  },
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤)
export const checkSubscriptionStatuses = mutation({
  handler: async (ctx) => {
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000; // 1 –¥–µ–Ω—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const threeDaysMs = 3 * oneDayMs; // 3 –¥–Ω—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫
    const expiredSubscriptions = await ctx.db
      .query("userSubscriptions")
      .filter((q) => 
        q.and(
          q.eq(q.field("status"), "active"),
          q.lt(q.field("expiresAt"), now)
        )
      )
      .collect();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "expired"
    for (const subscription of expiredSubscriptions) {
      await ctx.db.patch(subscription._id, {
        status: "expired",
        lastUpdatedAt: now,
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
      await sendSubscriptionNotification(ctx, subscription.userId, "expired", subscription._id);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å
    const expiresInOneDaySubscriptions = await ctx.db
      .query("userSubscriptions")
      .filter((q) => 
        q.and(
          q.eq(q.field("status"), "active"),
          q.gt(q.field("expiresAt"), now),
          q.lt(q.field("expiresAt"), now + oneDayMs)
        )
      )
      .collect();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (1 –¥–µ–Ω—å)
    for (const subscription of expiresInOneDaySubscriptions) {
      await sendSubscriptionNotification(ctx, subscription.userId, "expires_soon_1day", subscription._id);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
    const expiresInThreeDaysSubscriptions = await ctx.db
      .query("userSubscriptions")
      .filter((q) => 
        q.and(
          q.eq(q.field("status"), "active"),
          q.gt(q.field("expiresAt"), now + oneDayMs),
          q.lt(q.field("expiresAt"), now + threeDaysMs)
        )
      )
      .collect();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (3 –¥–Ω—è)
    for (const subscription of expiresInThreeDaysSubscriptions) {
      await sendSubscriptionNotification(ctx, subscription.userId, "expires_soon_3days", subscription._id);
    }
    
    return {
      expiredCount: expiredSubscriptions.length,
      expiresInOneDayCount: expiresInOneDaySubscriptions.length,
      expiresInThreeDaysCount: expiresInThreeDaysSubscriptions.length
    };
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function sendSubscriptionNotification(
  ctx: any,
  userId: Id<"users">,
  notificationType: "expired" | "expires_soon_1day" | "expires_soon_3days",
  subscriptionId: Id<"userSubscriptions">
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
  const lastNotification = await ctx.db
    .query("notifications")
    .withIndex("by_user_type_subscription", (q: any) => 
      q.eq("userId", userId)
      .eq("type", notificationType)
      .eq("subscriptionId", subscriptionId)
    )
    .order("desc")
    .first();
  
  const now = Date.now();
  
  // –ï—Å–ª–∏ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 12 —á–∞—Å–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (lastNotification && (now - lastNotification.createdAt < 12 * 60 * 60 * 1000)) {
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const user = await ctx.db.get(userId);
  if (!user) return;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Ç–∞—Ä–∏—Ñ–µ
  const subscription = await ctx.db.get(subscriptionId);
  if (!subscription) return;
  
  const plan = await ctx.db.get(subscription.planId);
  if (!plan) return;
  
  let message = "";
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  switch (notificationType) {
    case "expired":
      message = `üö® –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º.`;
      break;
    case "expires_soon_1day":
      message = `‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å!`;
      break;
    case "expires_soon_3days":
      message = `‚ÑπÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${plan.name}" –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë –∑–∞—Ä–∞–Ω–µ–µ.`;
      break;
  }
  
  if (message) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    await ctx.db.insert("notifications", {
      userId,
      type: notificationType,
      subscriptionId,
      message,
      isRead: false,
      createdAt: now,
      isSent: false // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    });
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ cron –∑–∞–¥–∞—á—É –≤ notifications.ts
    // –£–¥–∞–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ action, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
  }
} 